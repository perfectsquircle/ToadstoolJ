/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package toadstool;

import org.junit.Test;
import org.junit.experimental.theories.DataPoints;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import static org.junit.Assert.*;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

@RunWith(Parameterized.class)
public class IntegrationTest {
    // @formatter:off
    @Parameterized.Parameters(name = "connectionStrings")
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][] {
                { "jdbc:postgresql://localhost:5432/postgres", "postgres", "toadstool" },
        });
    }
    // @formatter:on

    private String connectionString;
    private String user;
    private String password;

    public IntegrationTest(String connectionString, String user, String password) {
        this.connectionString = connectionString;
        this.user = user;
        this.password = password;
    }

    @Test
    public void testBuild() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);
        var connection = context.getConnection();

        // @formatter:off
        var result = context
            .prepareStatement("select 1 as a, 2 as b, 3 as c where 'bar' = @foo")
            .withParameter("foo", "bar")
            .build(connection);
        // @formatter:on        

        assertNotNull(result);
        var parameterMetadata = result.getParameterMetaData();
        assertNotNull(parameterMetadata);
        assertEquals(1, parameterMetadata.getParameterCount());
    }

    @Test
    public void testToList() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        // @formatter:off
        var results = context
            .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo")
            .withParameter("foo", "bar")
            .toListOf(Foo.class);
        // @formatter:on

        assertNotNull(results);
        assertEquals(1, results.size());
        var first = results.get(0);
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2, first.getB());
        assertEquals(3, first.getC());
    }

    @Test
    public void testFirst() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        // @formatter:off
        var result = context
            .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo")
            .withParameter("foo", "bar")
            .first(Foo.class);
        // @formatter:on

        assertNotNull(result);
        assertTrue("Optional must not be empty", result.isPresent());
        var first = result.get();
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2, first.getB());
        assertEquals(3, first.getC());
    }

    @Test
    public void testMultipleParameterUse() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        // @formatter:off
        var result = context
            .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo or 'bat' = @foo or 'baz' = @foo or 'bag' = '@banana'")
            .withParameter("foo", "bar")
            .first(Foo.class);
        // @formatter:on

        assertNotNull(result);
        assertTrue("Optional must not be empty", result.isPresent());
        var first = result.get();
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2, first.getB());
        assertEquals(3, first.getC());
    }
}
