/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package toadstool;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.sql.SQLException;
import java.util.Arrays;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class IntegrationTest {
    @Parameters(name = "connectionStrings")
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][] {
                { "jdbc:postgresql://localhost:5432/postgres", "postgres", "toadstool" },
                { "jdbc:sqlserver://localhost:1433;", "SA", "Toadstool123" },
        });
    }

    private String connectionString;
    private String user;
    private String password;
    private boolean isPostgres;

    public IntegrationTest(String connectionString, String user, String password) {
        this.connectionString = connectionString;
        this.user = user;
        this.password = password;
        this.isPostgres = connectionString.contains("postgresql");
    }

    @Test
    public void testBuild() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);
        var connection = context.getConnection();

        var result = context
                .prepareStatement("select 1 as a, 2 as b, 3 as c where 'bar' = @foo")
                .withParameter("foo", "bar")
                .build(connection);

        assertNotNull(result);
        var parameterMetadata = result.getParameterMetaData();
        assertNotNull(parameterMetadata);
        assertEquals(1, parameterMetadata.getParameterCount());
    }

    @Test
    public void testToList() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        var results = context
                .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo")
                .withParameter("foo", "bar")
                .toListOf(Foo.class);

        assertNotNull(results);
        assertEquals(1, results.size());
        var first = results.get(0);
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2, first.getB());
        assertEquals(3, first.getC());
    }

    @Test
    public void testFirst() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        var result = context
                .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo")
                .withParameter("foo", "bar")
                .first(Foo.class);

        assertNotNull(result);
        assertTrue("Optional must not be empty", result.isPresent());
        var first = result.get();
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2, first.getB());
        assertEquals(3, first.getC());
    }

    @Test
    public void testMultipleParameterUse() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        var result = context
                .prepareStatement(
                        "select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo or 'bat' = @foo or 'baz' = @foo or 'bag' = '@banana'")
                .withParameter("foo", "bar")
                .first(Foo.class);

        assertNotNull(result);
        assertTrue("Optional must not be empty", result.isPresent());
        var first = result.get();
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2, first.getB());
        assertEquals(3, first.getC());
    }

    @Test
    public void testTypeMapping() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        var result = context
                .prepareStatement(
                        isPostgres
                                ? "select 1 as a, 2.0 as b, 'three' as c, now() as d, 66 as f"
                                : "select 1 as a, 2.0 as b, 'three' as c, getdate() as d, 66 as f")
                .first(Baz.class);

        assertNotNull(result);
        assertTrue("Optional must not be empty", result.isPresent());
        var first = result.get();
        assertNotNull(first);
        assertEquals(1, first.getA());
        assertEquals(2.0d, first.getB(), 0.1d);
        assertEquals("three", first.getC());
        assertNotNull(first.getD());
        assertEquals(66, first.getF());
    }

    @Test
    public void testTransaction() throws SQLException {
        var context = new SimpleDatabaseContext(connectionString, user, password);

        try (var transaction = context.beginTransaction()) {
            var result = transaction
                    .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo")
                    .withParameter("foo", "bar")
                    .first(Foo.class);

            var result2 = transaction
                    .prepareStatement("select 1 as a, 2 as b, 3 as c, 4 as d where 'bar' = @foo")
                    .withParameter("foo", "bar")
                    .first(Foo.class);

            transaction.commit();
        }
    }
}
